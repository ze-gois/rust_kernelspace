impl PartialEq<$t> for $name {
impl PartialEq<$name> for $t {
impl core::cmp::PartialOrd<$t> for $name {
impl core::cmp::PartialOrd<$name> for $t {
impl From<$name> for $t {
impl Into<$t> for $name {
impl $crate::elf::dtype::ELFType for $name {
impl $name {
impl Default for $name {
impl From<$inner> for $name {
impl_partial_eq_for_type!($name, $inner, u8, u16, u32, u64, u128, i8, i16, i32, i64, i128, usize, isize);
impl_from_for_type!($name, $inner, u8, u16, u32, u64, u128, i8, i16, i32, i64, i128, usize, isize);
impl_into_for_type!($name, $inner, u8, u16, u32, u64, u128, i8, i16, i32, i64, i128, usize, isize);
./draft/elf/macros.rs
impl PartialEq<$t> for $name {
impl PartialEq<$name> for $t {
impl core::cmp::PartialOrd<$t> for $name {
impl core::cmp::PartialOrd<$name> for $t {
impl From<$name> for $t {
impl Into<$t> for $name {
impl $crate::elf::dtype::ELFType for $name {
impl $name {
impl Default for $name {
impl From<$inner> for $name {
impl_partial_eq_for_type!($name, $inner, u8, u16, u32, u64, u128, i8, i16, i32, i64, i128, usize, isize);
impl_from_for_type!($name, $inner, u8, u16, u32, u64, u128, i8, i16, i32, i64, i128, usize, isize);
impl_into_for_type!($name, $inner, u8, u16, u32, u64, u128, i8, i16, i32, i64, i128, usize, isize);
./draft/macros.rs
impl PartialEq<$t> for $name {
impl PartialEq<$name> for $t {
impl core::cmp::PartialOrd<$t> for $name {
impl core::cmp::PartialOrd<$name> for $t {
impl From<$name> for $t {
impl Into<$t> for $name {
impl $crate::elf::dtype::ELFType for $name {
impl $name {
impl Default for $name {
impl From<$inner> for $name {
impl_partial_eq_for_type!($name, $inner, u8, u16, u32, u64, u128, i8, i16, i32, i64, i128, usize, isize);
impl_from_for_type!($name, $inner, u8, u16, u32, u64, u128, i8, i16, i32, i64, i128, usize, isize);
impl_into_for_type!($name, $inner, u8, u16, u32, u64, u128, i8, i16, i32, i64, i128, usize, isize);
./draft/tmp/elf_loader/elf/macros.rs
impl PartialEq<$t> for $name {
impl PartialEq<$name> for $t {
impl core::cmp::PartialOrd<$t> for $name {
impl core::cmp::PartialOrd<$name> for $t {
impl From<$name> for $t {
impl Into<$t> for $name {
impl $crate::elf::dtype::ELFType for $name {
impl $name {
impl Default for $name {
impl From<$inner> for $name {
impl_partial_eq_for_type!($name, $inner, u8, u16, u32, u64, u128, i8, i16, i32, i64, i128, usize, isize);
impl_from_for_type!($name, $inner, u8, u16, u32, u64, u128, i8, i16, i32, i64, i128, usize, isize);
impl_into_for_type!($name, $inner, u8, u16, u32, u64, u128, i8, i16, i32, i64, i128, usize, isize);
./draft/tmp/x/elf_loader/elf/macros.rs
impl core::cmp::PartialEq<$t> for $name {
impl core::cmp::PartialEq<$name> for $t {
impl core::cmp::PartialOrd<$t> for $name {
impl core::cmp::PartialOrd<$name> for $t {
impl From<$name> for $t {
impl Into<$name> for $t {
impl $crate::dtype::ELFType for $name {
impl $name {
impl Default for $name {
impl From<$inner> for $name {
crate::impl_partial_eq_for_type!($name, $inner, u8, u16, u32, u64, u128, i8, i16, i32, i64, i128, usize, isize);
crate::impl_from_for_type!($name, $inner, u8, u16, u32, u64, u128, i8, i16, i32, i64, i128, usize, isize);
crate::impl_into_for_type!($name, $inner, u8, u16, u32, u64, u128, i8, i16, i32, i64, i128);
./draft/-_draft_a_macros.rs
impl ErrorTrait for $error_enum_name {
impl Into<isize> for $error_enum_name {
./crates/syscall/src/macros.rs
impl core::cmp::PartialEq<$t> for $name {
impl core::cmp::PartialEq<$name> for $t {
impl core::cmp::PartialOrd<$t> for $name {
impl core::cmp::PartialOrd<$name> for $t {
impl From<$name> for $t {
impl Into<$name> for $t {
./crates/macros/src/lib.rs
impl $crate::dtype::ELFType for $name {
impl $name {
impl Default for $name {
impl From<$inner> for $name {
impl Into<$inner> for $name {
impl core::fmt::Display for $name {
macros::impl_partial_eq_for_type!($name, $inner, u8, u16, u32, u64, u128, i8, i16, i32, i64, i128, usize, isize);
macros::impl_from_for_type!($name, $inner, u8, u16, u32, u64, u128, i8, i16, i32, i64, i128, usize, isize);
macros::impl_into_for_type!($name, $inner, u8, u16, u32, u64, u128, i8, i16, i32, i64, i128);
./src/dtype/macros.rs
